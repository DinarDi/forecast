{"version":3,"sources":["hooks/useStyles.ts","keys/key.js","store/weather.ts","components/Search.tsx","img/Clear.png","img/Clouds.png","img/Drizzle.png","img/Rain.png","img/Thunderstorm.png","img/Snow.png","components/WeatherImg.tsx","components/CurrentWeather.tsx","components/FiveDayForecast.tsx","components/Weather.tsx","App.tsx","index.tsx"],"names":["useStyles","makeStyles","flex","display","justifyContent","alignItems","innerContainer","marginTop","border","colors","blueGrey","padding","textFieldMargin","marginBottom","container","btnBack","card","maxWidth","flexColumn","textAlign","flexDirection","cardFive","rootGrid","flexGrow","weatherImg","height","API_KEY","currentWeather","fiveDayForecast","loading","error","errorText","fetchWeather","city","a","axios","get","params","q","units","appid","response","then","resp","data","list","responseFive","runInAction","i","length","makeAutoObservable","this","Search","observer","store","history","useHistory","useState","setCity","Container","className","noValidate","autoComplete","onSubmit","e","preventDefault","push","TextField","label","variant","color","fullWidth","value","onChange","target","Button","type","WeatherImg","img","main","cloud","thunderstorm","drizzle","rain","snow","clear","src","alt","CurrentWeather","Card","elevation","CardHeader","title","name","subheader","CardContent","weather","Typography","component","temp","feels_like","FiveDayForecast","Grid","spacing","map","forecast","item","lg","dt_txt","split","temp_min","temp_max","Weather","onClick","goBack","App","exact","path","to","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.978226e9.chunk.js","sourcesContent":["import { colors, makeStyles } from \"@material-ui/core\";\r\n\r\nexport const useStyles = makeStyles({\r\n  flex: {\r\n    display: \"flex\",\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n  },\r\n  innerContainer: {\r\n    marginTop: \"35vh\",\r\n    border: `2px solid ${colors.blueGrey[700]}`,\r\n    padding: \"35px\",\r\n  },\r\n  textFieldMargin: {\r\n    marginBottom: \"15px\",\r\n  },\r\n\r\n  container: {\r\n    marginTop: \"15px\",\r\n  },\r\n  btnBack: {\r\n    marginBottom: \"15px\",\r\n  },\r\n  card: {\r\n    maxWidth: \"400px\",\r\n    marginBottom: \"25px\",\r\n  },\r\n  flexColumn: {\r\n    display: \"flex\",\r\n    justifyContent: \"center\",\r\n    alignItems: \"center\",\r\n    textAlign: \"center\",\r\n    flexDirection: \"column\",\r\n  },\r\n\r\n  cardFive: {\r\n    maxWidth: \"350px\",\r\n  },\r\n  rootGrid: {\r\n    flexGrow: 1,\r\n    justifyContent: \"center\",\r\n  },\r\n  weatherImg: {\r\n    maxWidth: \"350px\",\r\n    height: \"100px\",\r\n    marginBottom: \"10px\",\r\n  },\r\n});\r\n","export const API_KEY = \"41ffbc5e9e9ef0b22bf62573ed68a6c2\";\r\n","import axios from \"axios\";\r\nimport { makeAutoObservable, runInAction } from \"mobx\";\r\nimport { API_KEY } from \"../keys/key\";\r\n\r\ninterface Iweather {\r\n  main: string;\r\n  description: string;\r\n}\r\n\r\ninterface Imain {\r\n  temp: number;\r\n  feels_like: number;\r\n}\r\n\r\ninterface IcurrentWeather {\r\n  name: string;\r\n  weather: Iweather[];\r\n  main: Imain;\r\n}\r\n\r\ninterface ImainFive {\r\n  temp_min: number;\r\n  temp_max: number;\r\n}\r\n\r\ninterface IfiveDayForecast {\r\n  dt_txt: string;\r\n  main: ImainFive;\r\n  weather: Iweather[];\r\n}\r\n\r\ninterface IfiveDayForecastAPI {\r\n  list: IfiveDayForecast[];\r\n}\r\n\r\nclass Weather {\r\n  currentWeather: IcurrentWeather[] = [];\r\n  fiveDayForecast: IfiveDayForecast[] = [];\r\n  loading: boolean = false;\r\n  error: boolean = false;\r\n  errorText: string = \"\";\r\n\r\n  constructor() {\r\n    makeAutoObservable(this);\r\n  }\r\n\r\n  fetchWeather = async (city: string) => {\r\n    try {\r\n      this.fiveDayForecast = [];\r\n      this.loading = true;\r\n      this.error = false;\r\n      this.errorText = \"\";\r\n      const response = await axios.get<IcurrentWeather>(\r\n        `https://api.openweathermap.org/data/2.5/weather`,\r\n        {\r\n          params: { q: city, units: \"metric\", appid: API_KEY },\r\n        }\r\n      );\r\n      const responseFive = await axios\r\n        .get<IfiveDayForecastAPI>(\r\n          `https://api.openweathermap.org/data/2.5/forecast`,\r\n          {\r\n            params: { q: city, units: \"metric\", appid: API_KEY },\r\n          }\r\n        )\r\n        .then((resp) => resp.data.list);\r\n      runInAction(() => {\r\n        this.currentWeather = [response.data];\r\n        for (let i = 0; i < responseFive.length; i += 8) {\r\n          this.fiveDayForecast = [...this.fiveDayForecast, responseFive[i]];\r\n        }\r\n        this.loading = false;\r\n      });\r\n    } catch (e) {\r\n      runInAction(() => {\r\n        this.error = true;\r\n        this.errorText = `Something went wrong. Try again.`;\r\n      });\r\n    }\r\n  };\r\n}\r\n\r\nexport default new Weather();\r\n","import { Button, Container, TextField } from \"@material-ui/core\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport React, { useState } from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { useStyles } from \"../hooks/useStyles\";\r\nimport store from \"../store/weather\";\r\n\r\nconst Search: React.FC = observer(() => {\r\n  const { fetchWeather } = store;\r\n  const history = useHistory();\r\n  const [city, setCity] = useState<string>(\"\");\r\n  const { flex, innerContainer, textFieldMargin } = useStyles();\r\n\r\n  const submitHandler = (e: React.FormEvent<HTMLFormElement>) => {\r\n    e.preventDefault();\r\n    fetchWeather(city);\r\n    history.push(\"/weather\");\r\n  };\r\n\r\n  return (\r\n    <Container className={flex}>\r\n      <Container maxWidth=\"sm\" className={innerContainer}>\r\n        <form noValidate autoComplete=\"off\" onSubmit={submitHandler}>\r\n          <TextField\r\n            label=\"City name\"\r\n            variant=\"outlined\"\r\n            color=\"primary\"\r\n            fullWidth\r\n            className={textFieldMargin}\r\n            value={city}\r\n            onChange={(e: React.ChangeEvent<HTMLInputElement>) =>\r\n              setCity(e.target.value)\r\n            }\r\n          />\r\n          <Button type=\"submit\" color=\"primary\" variant=\"contained\" fullWidth>\r\n            Search\r\n          </Button>\r\n        </form>\r\n      </Container>\r\n    </Container>\r\n  );\r\n});\r\n\r\nexport default Search;\r\n","export default __webpack_public_path__ + \"static/media/Clear.4330d4cc.png\";","export default __webpack_public_path__ + \"static/media/Clouds.18bde210.png\";","export default __webpack_public_path__ + \"static/media/Drizzle.3220db8f.png\";","export default __webpack_public_path__ + \"static/media/Rain.b11b9227.png\";","export default __webpack_public_path__ + \"static/media/Thunderstorm.056e8d26.png\";","export default __webpack_public_path__ + \"static/media/Snow.06e3adc0.png\";","import React from \"react\";\r\nimport { useStyles } from \"../hooks/useStyles\";\r\nimport clear from \"../img/Clear.png\";\r\nimport cloud from \"../img/Clouds.png\";\r\nimport drizzle from \"../img/Drizzle.png\";\r\nimport rain from \"../img/Rain.png\";\r\nimport thunderstorm from \"../img/Thunderstorm.png\";\r\nimport snow from \"../img/Snow.png\";\r\n\r\ninterface IWeatherImg {\r\n  main: string;\r\n}\r\n\r\nconst WeatherImg: React.FC<IWeatherImg> = ({ main }) => {\r\n  const { weatherImg } = useStyles();\r\n  let img;\r\n  switch (main) {\r\n    case \"Clouds\":\r\n      img = cloud;\r\n      break;\r\n    case \"Thunderstorm\":\r\n      img = thunderstorm;\r\n      break;\r\n    case \"Drizzle\":\r\n      img = drizzle;\r\n      break;\r\n    case \"Rain\":\r\n      img = rain;\r\n      break;\r\n    case \"Snow\":\r\n      img = snow;\r\n      break;\r\n    case \"Clear\":\r\n      img = clear;\r\n      break;\r\n    default:\r\n      img = clear;\r\n      break;\r\n  }\r\n\r\n  return <img src={img} alt=\"weather\" className={weatherImg} />;\r\n};\r\n\r\nexport default WeatherImg;\r\n","import { Card, CardContent, CardHeader, Typography } from \"@material-ui/core\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { useStyles } from \"../hooks/useStyles\";\r\nimport store from \"../store/weather\";\r\nimport WeatherImg from \"./WeatherImg\";\r\n\r\nconst CurrentWeather: React.FC = observer(() => {\r\n  const { currentWeather } = store;\r\n  const { card } = useStyles();\r\n\r\n  return (\r\n    <Card elevation={7} className={card}>\r\n      <CardHeader title={currentWeather[0].name} subheader=\"Current weather\" />\r\n      <CardContent>\r\n        <WeatherImg main={currentWeather[0].weather[0].main} />\r\n        <Typography variant=\"h5\" component=\"h5\">\r\n          Temperature: {currentWeather[0].main.temp} °C\r\n        </Typography>\r\n        <Typography variant=\"h5\" component=\"h5\">\r\n          Feels like: {currentWeather[0].main.feels_like} °C\r\n        </Typography>\r\n      </CardContent>\r\n    </Card>\r\n  );\r\n});\r\n\r\nexport default CurrentWeather;\r\n","import {\r\n  Card,\r\n  CardContent,\r\n  CardHeader,\r\n  Grid,\r\n  Typography,\r\n} from \"@material-ui/core\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { useStyles } from \"../hooks/useStyles\";\r\nimport store from \"../store/weather\";\r\nimport WeatherImg from \"./WeatherImg\";\r\n\r\nconst FiveDayForecast: React.FC = observer(() => {\r\n  const { fiveDayForecast } = store;\r\n  const { cardFive, rootGrid } = useStyles();\r\n\r\n  return (\r\n    <Grid container className={rootGrid} spacing={2}>\r\n      {fiveDayForecast.map((forecast) => (\r\n        <Grid key={forecast.dt_txt} item lg={2}>\r\n          <Card elevation={7} className={cardFive}>\r\n            <CardHeader title={forecast.dt_txt.split(\" \")[0]} />\r\n            <CardContent>\r\n              <WeatherImg main={forecast.weather[0].main} />\r\n              <Typography variant=\"h5\" component=\"h5\">\r\n                Min: {forecast.main.temp_min} °C\r\n              </Typography>\r\n              <Typography variant=\"h5\" component=\"h5\">\r\n                Max: {forecast.main.temp_max} °C\r\n              </Typography>\r\n            </CardContent>\r\n          </Card>\r\n        </Grid>\r\n      ))}\r\n    </Grid>\r\n  );\r\n});\r\n\r\nexport default FiveDayForecast;\r\n","import { Button, Container, Typography } from \"@material-ui/core\";\r\nimport { observer } from \"mobx-react-lite\";\r\nimport React from \"react\";\r\nimport { useHistory } from \"react-router-dom\";\r\nimport { useStyles } from \"../hooks/useStyles\";\r\nimport store from \"../store/weather\";\r\nimport CurrentWeather from \"./CurrentWeather\";\r\nimport FiveDayForecast from \"./FiveDayForecast\";\r\n\r\nconst Weather: React.FC = observer(() => {\r\n  const { loading, error, errorText } = store;\r\n  const history = useHistory();\r\n  const { container, btnBack, flexColumn } = useStyles();\r\n\r\n  if (error) {\r\n    return (\r\n      <Container className={container}>\r\n        <Button\r\n          color=\"primary\"\r\n          variant=\"contained\"\r\n          onClick={() => history.goBack()}\r\n          className={btnBack}\r\n        >\r\n          Back\r\n        </Button>\r\n        <Typography variant=\"h1\" component=\"h1\">\r\n          {errorText}\r\n        </Typography>\r\n      </Container>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <Container className={container}>\r\n      <Button\r\n        color=\"primary\"\r\n        variant=\"contained\"\r\n        onClick={() => history.goBack()}\r\n        className={btnBack}\r\n      >\r\n        Back\r\n      </Button>\r\n      <Container className={flexColumn}>\r\n        {loading ? (\r\n          <Typography variant=\"h1\" component=\"h1\">\r\n            Loading...\r\n          </Typography>\r\n        ) : (\r\n          <>\r\n            <CurrentWeather />\r\n            <FiveDayForecast />\r\n          </>\r\n        )}\r\n      </Container>\r\n    </Container>\r\n  );\r\n});\r\n\r\nexport default Weather;\r\n","import React from \"react\";\nimport { observer } from \"mobx-react-lite\";\nimport { Redirect, Route, Switch } from \"react-router-dom\";\nimport Search from \"./components/Search\";\nimport Weather from \"./components/Weather\";\n\nconst App: React.FC = observer(() => {\n  return (\n    <div>\n      <Switch>\n        <Route exact path=\"/\" component={Search} />\n        <Route path=\"/weather\" component={Weather} />\n        <Redirect to=\"/\" />\n      </Switch>\n    </div>\n  );\n});\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { HashRouter } from \"react-router-dom\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <HashRouter>\n      <App />\n    </HashRouter>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}